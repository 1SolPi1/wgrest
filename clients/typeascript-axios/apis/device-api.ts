/* tslint:disable */
/* eslint-disable */
/**
 * WireGuard RESTful API
 * Manage WireGuard VPN tunnels by RESTful manner.  Supported features:    * Manage device: create, update, and delete wireguard interface   * Manage device's ip addresses: attache or detach ip addresses to the netowrk interface   * Manage device's peers: create, update, and delete peers   * Peer's QR code, for use in WireGuard & ForestVPN client  ForestVPN client may be used as alternative client with enabled P2P technology over WireGuard tunnelling. Read more on https://forestvpn.com/ 
 *
 * OpenAPI spec version: 1.0
 * Contact: support@forestvpn.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Device } from '../models';
import { DeviceCreateOrUpdateRequest } from '../models';
import { Peer } from '../models';
import { PeerCreateOrUpdateRequest } from '../models';
/**
 * DeviceApi - axios parameter creator
 * @export
 */
export const DeviceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new device
         * @param {DeviceCreateOrUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice: async (body?: DeviceCreateOrUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new device peer
         * @param {string} name Device&#x27;s name
         * @param {PeerCreateOrUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevicePeer: async (name: string, body?: PeerCreateOrUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createDevicePeer.');
            }
            const localVarPath = `/devices/{name}/peers/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Device
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteDevice.');
            }
            const localVarPath = `/devices/{name}/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete device's peer
         * @param {string} name Device&#x27;s name
         * @param {string} urlSafePubKey Peer&#x27;s url safe public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevicePeer: async (name: string, urlSafePubKey: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteDevicePeer.');
            }
            // verify required parameter 'urlSafePubKey' is not null or undefined
            if (urlSafePubKey === null || urlSafePubKey === undefined) {
                throw new RequiredError('urlSafePubKey','Required parameter urlSafePubKey was null or undefined when calling deleteDevicePeer.');
            }
            const localVarPath = `/devices/{name}/peers/{urlSafePubKey}/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"urlSafePubKey"}}`, encodeURIComponent(String(urlSafePubKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get device info
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevice: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getDevice.');
            }
            const localVarPath = `/devices/{name}/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get device peer info
         * @param {string} name Device&#x27;s name
         * @param {string} urlSafePubKey Peer&#x27;s url safe public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicePeer: async (name: string, urlSafePubKey: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getDevicePeer.');
            }
            // verify required parameter 'urlSafePubKey' is not null or undefined
            if (urlSafePubKey === null || urlSafePubKey === undefined) {
                throw new RequiredError('urlSafePubKey','Required parameter urlSafePubKey was null or undefined when calling getDevicePeer.');
            }
            const localVarPath = `/devices/{name}/peers/{urlSafePubKey}/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"urlSafePubKey"}}`, encodeURIComponent(String(urlSafePubKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Peers list
         * @param {string} name Device&#x27;s name
         * @param {number} [perPage] Number of WireGuard device&#x27;s peers per page. Default is 100
         * @param {number} [page] Page number. Default is 0
         * @param {string} [q] Search query
         * @param {string} [sort] Sort field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevicePeers: async (name: string, perPage?: number, page?: number, q?: string, sort?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listDevicePeers.');
            }
            const localVarPath = `/devices/{name}/peers/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Devices list
         * @param {number} [perPage] Number of WireGuard devices per page. Default is 100
         * @param {number} [page] Page number. Default is 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices: async (perPage?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update device
         * @param {DeviceCreateOrUpdateRequest} body 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice: async (body: DeviceCreateOrUpdateRequest, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateDevice.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateDevice.');
            }
            const localVarPath = `/devices/{name}/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update device's peer
         * @param {string} name Device&#x27;s name
         * @param {string} urlSafePubKey Peer&#x27;s url safe public key
         * @param {PeerCreateOrUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevicePeer: async (name: string, urlSafePubKey: string, body?: PeerCreateOrUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateDevicePeer.');
            }
            // verify required parameter 'urlSafePubKey' is not null or undefined
            if (urlSafePubKey === null || urlSafePubKey === undefined) {
                throw new RequiredError('urlSafePubKey','Required parameter urlSafePubKey was null or undefined when calling updateDevicePeer.');
            }
            const localVarPath = `/devices/{name}/peers/{urlSafePubKey}/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"urlSafePubKey"}}`, encodeURIComponent(String(urlSafePubKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceApi - functional programming interface
 * @export
 */
export const DeviceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new device
         * @param {DeviceCreateOrUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDevice(body?: DeviceCreateOrUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).createDevice(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create new device peer
         * @param {string} name Device&#x27;s name
         * @param {PeerCreateOrUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDevicePeer(name: string, body?: PeerCreateOrUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Peer>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).createDevicePeer(name, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Device
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevice(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).deleteDevice(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete device's peer
         * @param {string} name Device&#x27;s name
         * @param {string} urlSafePubKey Peer&#x27;s url safe public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevicePeer(name: string, urlSafePubKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Peer>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).deleteDevicePeer(name, urlSafePubKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get device info
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevice(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).getDevice(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get device peer info
         * @param {string} name Device&#x27;s name
         * @param {string} urlSafePubKey Peer&#x27;s url safe public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevicePeer(name: string, urlSafePubKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Peer>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).getDevicePeer(name, urlSafePubKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Peers list
         * @param {string} name Device&#x27;s name
         * @param {number} [perPage] Number of WireGuard device&#x27;s peers per page. Default is 100
         * @param {number} [page] Page number. Default is 0
         * @param {string} [q] Search query
         * @param {string} [sort] Sort field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDevicePeers(name: string, perPage?: number, page?: number, q?: string, sort?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Peer>>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).listDevicePeers(name, perPage, page, q, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Devices list
         * @param {number} [perPage] Number of WireGuard devices per page. Default is 100
         * @param {number} [page] Page number. Default is 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDevices(perPage?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Device>>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).listDevices(perPage, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update device
         * @param {DeviceCreateOrUpdateRequest} body 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevice(body: DeviceCreateOrUpdateRequest, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).updateDevice(body, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update device's peer
         * @param {string} name Device&#x27;s name
         * @param {string} urlSafePubKey Peer&#x27;s url safe public key
         * @param {PeerCreateOrUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevicePeer(name: string, urlSafePubKey: string, body?: PeerCreateOrUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Peer>> {
            const localVarAxiosArgs = await DeviceApiAxiosParamCreator(configuration).updateDevicePeer(name, urlSafePubKey, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeviceApi - factory interface
 * @export
 */
export const DeviceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create new device
         * @param {DeviceCreateOrUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice(body?: DeviceCreateOrUpdateRequest, options?: any): AxiosPromise<Device> {
            return DeviceApiFp(configuration).createDevice(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new device peer
         * @param {string} name Device&#x27;s name
         * @param {PeerCreateOrUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevicePeer(name: string, body?: PeerCreateOrUpdateRequest, options?: any): AxiosPromise<Peer> {
            return DeviceApiFp(configuration).createDevicePeer(name, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Device
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice(name: string, options?: any): AxiosPromise<void> {
            return DeviceApiFp(configuration).deleteDevice(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete device's peer
         * @param {string} name Device&#x27;s name
         * @param {string} urlSafePubKey Peer&#x27;s url safe public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevicePeer(name: string, urlSafePubKey: string, options?: any): AxiosPromise<Peer> {
            return DeviceApiFp(configuration).deleteDevicePeer(name, urlSafePubKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get device info
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevice(name: string, options?: any): AxiosPromise<Device> {
            return DeviceApiFp(configuration).getDevice(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get device peer info
         * @param {string} name Device&#x27;s name
         * @param {string} urlSafePubKey Peer&#x27;s url safe public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicePeer(name: string, urlSafePubKey: string, options?: any): AxiosPromise<Peer> {
            return DeviceApiFp(configuration).getDevicePeer(name, urlSafePubKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Peers list
         * @param {string} name Device&#x27;s name
         * @param {number} [perPage] Number of WireGuard device&#x27;s peers per page. Default is 100
         * @param {number} [page] Page number. Default is 0
         * @param {string} [q] Search query
         * @param {string} [sort] Sort field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevicePeers(name: string, perPage?: number, page?: number, q?: string, sort?: string, options?: any): AxiosPromise<Array<Peer>> {
            return DeviceApiFp(configuration).listDevicePeers(name, perPage, page, q, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Devices list
         * @param {number} [perPage] Number of WireGuard devices per page. Default is 100
         * @param {number} [page] Page number. Default is 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices(perPage?: number, page?: number, options?: any): AxiosPromise<Array<Device>> {
            return DeviceApiFp(configuration).listDevices(perPage, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update device
         * @param {DeviceCreateOrUpdateRequest} body 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice(body: DeviceCreateOrUpdateRequest, name: string, options?: any): AxiosPromise<Device> {
            return DeviceApiFp(configuration).updateDevice(body, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update device's peer
         * @param {string} name Device&#x27;s name
         * @param {string} urlSafePubKey Peer&#x27;s url safe public key
         * @param {PeerCreateOrUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevicePeer(name: string, urlSafePubKey: string, body?: PeerCreateOrUpdateRequest, options?: any): AxiosPromise<Peer> {
            return DeviceApiFp(configuration).updateDevicePeer(name, urlSafePubKey, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
export class DeviceApi extends BaseAPI {
    /**
     * 
     * @summary Create new device
     * @param {DeviceCreateOrUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public createDevice(body?: DeviceCreateOrUpdateRequest, options?: any) {
        return DeviceApiFp(this.configuration).createDevice(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create new device peer
     * @param {string} name Device&#x27;s name
     * @param {PeerCreateOrUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public createDevicePeer(name: string, body?: PeerCreateOrUpdateRequest, options?: any) {
        return DeviceApiFp(this.configuration).createDevicePeer(name, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Device
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deleteDevice(name: string, options?: any) {
        return DeviceApiFp(this.configuration).deleteDevice(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete device's peer
     * @param {string} name Device&#x27;s name
     * @param {string} urlSafePubKey Peer&#x27;s url safe public key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deleteDevicePeer(name: string, urlSafePubKey: string, options?: any) {
        return DeviceApiFp(this.configuration).deleteDevicePeer(name, urlSafePubKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get device info
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public getDevice(name: string, options?: any) {
        return DeviceApiFp(this.configuration).getDevice(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get device peer info
     * @param {string} name Device&#x27;s name
     * @param {string} urlSafePubKey Peer&#x27;s url safe public key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public getDevicePeer(name: string, urlSafePubKey: string, options?: any) {
        return DeviceApiFp(this.configuration).getDevicePeer(name, urlSafePubKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Peers list
     * @param {string} name Device&#x27;s name
     * @param {number} [perPage] Number of WireGuard device&#x27;s peers per page. Default is 100
     * @param {number} [page] Page number. Default is 0
     * @param {string} [q] Search query
     * @param {string} [sort] Sort field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public listDevicePeers(name: string, perPage?: number, page?: number, q?: string, sort?: string, options?: any) {
        return DeviceApiFp(this.configuration).listDevicePeers(name, perPage, page, q, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Devices list
     * @param {number} [perPage] Number of WireGuard devices per page. Default is 100
     * @param {number} [page] Page number. Default is 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public listDevices(perPage?: number, page?: number, options?: any) {
        return DeviceApiFp(this.configuration).listDevices(perPage, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update device
     * @param {DeviceCreateOrUpdateRequest} body 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public updateDevice(body: DeviceCreateOrUpdateRequest, name: string, options?: any) {
        return DeviceApiFp(this.configuration).updateDevice(body, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update device's peer
     * @param {string} name Device&#x27;s name
     * @param {string} urlSafePubKey Peer&#x27;s url safe public key
     * @param {PeerCreateOrUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public updateDevicePeer(name: string, urlSafePubKey: string, body?: PeerCreateOrUpdateRequest, options?: any) {
        return DeviceApiFp(this.configuration).updateDevicePeer(name, urlSafePubKey, body, options).then((request) => request(this.axios, this.basePath));
    }
}
